AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for deploying a JavaScript application with AWS Lambda, API Gateway, CloudWatch, and WAF.

Resources:

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler  # Adjust to match your JavaScript applicationâ€™s entry point
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-s3-bucket-name  # Replace with your S3 bucket name
        S3Key: image-search.zip  # Replace with your uploaded file name
      Runtime: nodejs16.x  # Adjust based on your Node.js version
      MemorySize: 128
      Timeout: 10

  # API Gateway
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageSearchApi

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: app
      RestApiId: !Ref MyApiGateway

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref AWS::Region
            LambdaArn: !GetAtt MyLambdaFunction.Arn

  # API Gateway Stage with Caching
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref MyApiGateway
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          CachingEnabled: true
          CacheTtlInSeconds: 300  # 5 minutes cache TTL
          DataTraceEnabled: true
          MetricsEnabled: true

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/GET/app"

  # WAF Web ACL
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Scope: REGIONAL
      Rules:
        - Name: AWSManagedRules
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRules
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: MyWebACL

  # WAF Association with API Gateway
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${MyApiGateway}/stages/prod"
      WebACLArn: !Ref WebACL

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/app"
